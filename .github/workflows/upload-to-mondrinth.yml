name: Upload to Modrinth

on:
  workflow_run:
    workflows: ["Create Release Zip"]
    types:
      - completed

jobs:
  upload:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download release assets
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir -p release-assets
          
          RELEASE_ID=$(curl -s -H "Authorization: token $GH_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/releases/latest" \
            | jq -r '.id')

          if [[ "$RELEASE_ID" == "null" || -z "$RELEASE_ID" ]]; then
            echo "❌ ERROR: No release found."
            exit 1
          fi

          ASSETS=$(curl -s -H "Authorization: token $GH_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID/assets" \
            | jq -r '.[].browser_download_url')

          if [ -z "$ASSETS" ]; then
            echo "❌ ERROR: No assets found for this release."
            exit 1
          fi

          for URL in $ASSETS; do
            wget -P release-assets/ "$URL"
          done

          ls -l release-assets  # Debugging

      - name: Find valid ZIP files
        id: find_zips
        run: |
          ZIP_FILES=$(ls release-assets/EnvironmentZCompat-*-*.zip 2>/dev/null || echo "")

          if [ -z "$ZIP_FILES" ]; then
            echo "❌ ERROR: No valid zip files found."
            exit 1
          fi

          echo "ZIP_FILES=$ZIP_FILES" >> $GITHUB_ENV

      - name: Extract version information
        id: extract_versions
        run: |
          FILE=$(echo $ZIP_FILES | head -n1)  # Take the first valid file
          MOD_VERSION=$(echo "$FILE" | grep -oP 'EnvironmentZCompat-\K[\d]+\.[\d]+\.[\d]+(?=-)')
          MC_VERSION=$(echo "$FILE" | grep -oP '[\d]+\.[\d]+\.[\d]+(?=\.zip)')

          if [ -z "$MOD_VERSION" ] || [ -z "$MC_VERSION" ]; then
            echo "❌ ERROR: Failed to extract version numbers from $FILE"
            exit 1
          fi

          echo "MOD_VERSION=$MOD_VERSION" >> $GITHUB_ENV
          echo "MC_VERSION=$MC_VERSION" >> $GITHUB_ENV
          echo "✅ Extracted versions: Mod Version: $MOD_VERSION, Minecraft Version: $MC_VERSION"

      - name: Generate metadata JSON
        run: |
          CHANGELOG="${{ github.event.release.body }}"
          if [ -z "$CHANGELOG" ]; then
            CHANGELOG="No changelog provided."
          fi

          DEPENDENCIES='[{"dependency_type": "required", "project_id": "environmentz"}]'

          JSON_PAYLOAD="release-assets/modrinth_metadata.json"

          echo "{
            \"name\": \"Release $MOD_VERSION\",
            \"version_number\": \"$MOD_VERSION\",
            \"game_versions\": [\"$MC_VERSION\"],
            \"loaders\": [\"minecraft\"],
            \"version_type\": \"release\",
            \"project_id\": \"${{ secrets.MODRINTH_PROJECT_ID }}\",
            \"primary_file\": \"$(basename $FILE)\",
            \"file_parts\": [\"$(basename $FILE)\"],
            \"dependencies\": $DEPENDENCIES,
            \"changelog\": \"$(echo \"$CHANGELOG\" | jq -Rsa .)\"
          }" > "$JSON_PAYLOAD"

      - name: Upload to Modrinth
        run: |
          for FILE in ${{ env.ZIP_FILES }}; do
            echo "Uploading $FILE to Modrinth..."
            curl -X POST "https://api.modrinth.com/v2/version" \
              -H "Authorization: ${{ secrets.MODRINTH_API_KEY }}" \
              -H "Content-Type: multipart/form-data" \
              -F "data=@release-assets/modrinth_metadata.json;type=application/json" \
              -F "primary_file=@$FILE"
            echo "✅ Successfully uploaded $FILE to Modrinth"
          done
