name: Create Release Zip
permissions:
  contents: write

on:
  push:
    tags:
      - '*.*.*'  # Matches tags like 1.0.0, 1.0.1, etc.

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout the repository at the pushed tag.
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Ensures full history is available

      # 2️⃣ Extract the Minecraft version (Branch Name)
      - name: Get Minecraft version (Branch)
        id: get_mc_version
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Try to extract branch from GITHUB_REF
          BRANCH_NAME=${GITHUB_REF#refs/heads/}

          # If triggered by a tag, find the branch that the tag was created from
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            echo "Fetching branch name for tag..."
            BRANCH_NAME=$(git branch -r --contains $GITHUB_REF_NAME | grep -oE 'origin/[^ ]+' | sed 's/origin\///' | head -n 1)
          fi

          if [ -z "$BRANCH_NAME" ]; then
            echo "❌ ERROR: Could not determine branch name!"
            exit 1
          fi

          # Ensure the extracted branch name follows a valid Minecraft version format (e.g., 1.20.1)
          if [[ ! $BRANCH_NAME =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ ERROR: Branch name is invalid or not a Minecraft version: $BRANCH_NAME"
            exit 1
          fi

          echo "MC_VERSION=$BRANCH_NAME" >> $GITHUB_ENV
          echo "✅ Minecraft Version: $BRANCH_NAME"

      # 3️⃣ Define the ZIP file name
      - name: Set ZIP file name
        id: set_zip_name
        run: echo "ZIP_NAME=EnvironmentZCompat-${{ github.ref_name }}-${{ env.MC_VERSION }}.zip" >> $GITHUB_ENV

      # 4️⃣ Zip only the contents of the `EnvironmentZCompat` folder.
      - name: Zip EnvironmentZCompat folder contents
        working-directory: EnvironmentZCompat
        run: |
          rm -f ../$ZIP_NAME
          zip -r ../$ZIP_NAME *

      # 5️⃣ Create a GitHub Release if it doesn't exist.
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 6️⃣ Upload the generated ZIP file as a release asset.
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.ZIP_NAME }}
          asset_name: ${{ env.ZIP_NAME }}
          asset_content_type: application/zip
