name: Create Release Zip
permissions:
  contents: write

on:
  push:
    tags:
      - '*.*.*'  # Matches tags like 1.0.0, 1.0.1, etc.

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout the repository at the pushed tag.
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}

      # 2. Extract branch name
      - name: Get branch name
        id: get_branch
        run: echo "BRANCH_NAME=$(git branch --show-current || echo ${{ github.ref_name }})" >> $GITHUB_ENV

      # 3. Define the zip file name using the version (tag) and branch name
      - name: Set ZIP file name
        id: set_zip_name
        run: echo "ZIP_NAME=EnvironmentZCompat-${{ github.ref_name }}-${{ env.BRANCH_NAME }}.zip" >> $GITHUB_ENV

      # 4. Zip only the contents of the EnvironmentZCompat folder.
      - name: Zip EnvironmentZCompat folder contents
        working-directory: EnvironmentZCompat
        run: |
          rm -f ../$ZIP_NAME
          zip -r ../$ZIP_NAME *

      # 5. Check if a release already exists for this tag.
      - name: Check if release exists
        id: check_release
        uses: actions/github-script@v6
        with:
          script: |
            const tag = process.env.TAG_NAME;
            try {
              const release = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: tag,
              });
              core.info(`Release for tag ${tag} already exists.`);
              core.setOutput("upload_url", release.data.upload_url);
            } catch (error) {
              if (error.status === 404) {
                core.info(`No release for tag ${tag} found.`);
                core.setOutput("upload_url", "");
              } else {
                throw error;
              }
            }
        env:
          TAG_NAME: ${{ github.ref_name }}

      # 6. If no release exists, create one.
      - name: Create GitHub Release if not exists
        id: create_release
        if: steps.check_release.outputs.upload_url == ''
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      # 7. Set the final upload URL (from the existing release or the newly created one).
      - name: Set final upload URL
        id: set_upload_url
        run: |
          if [ "${{ steps.check_release.outputs.upload_url }}" != "" ]; then
            echo "Using existing release upload URL: ${{ steps.check_release.outputs.upload_url }}"
            echo "upload_url=${{ steps.check_release.outputs.upload_url }}" >> $GITHUB_ENV
          else
            echo "Using new release upload URL: ${{ steps.create_release.outputs.upload_url }}"
            echo "upload_url=${{ steps.create_release.outputs.upload_url }}" >> $GITHUB_ENV
          fi

      # 8. Upload the generated zip file as a release asset.
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.upload_url }}
          asset_path: ${{ env.ZIP_NAME }}
          asset_name: ${{ env.ZIP_NAME }}
          asset_content_type: application/zip
